{"version":3,"sources":["App.js","g920/wheel.js","g920/pedal.js","g920/pedals.js","serviceWorker.js","index.js"],"names":["Wheel","wheelStyle","transform","this","props","rotation","alt","style","src","Component","flatstore","connect","ownProps","axis","key","value","store","Pedal","currentPos","downAmount","width","position","top","left","Pedals","defaultButtons","defaultAxes","i","push","pressed","touched","set","App","onGamepadConnected","e","pads","navigator","getGamepads","gp","gamepad","index","console","log","id","buttons","length","axes","setState","gamePads","toLowerCase","indexOf","changeGamepad","start","a","b","state","gamepadIndex","gameLoopStarted","window","addEventListener","gameLoop","paddingLeft","backgroundColor","onChange","target","Object","values","map","buttonStates","item","axesStates","cancelAnimationFrame","requestAnimationFrame","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cbea0c5c.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport Wheel from './g920/wheel';\nimport Pedals from './g920/pedals';\n\nimport flatstore from 'flatstore';\n\nlet defaultButtons = [];\nlet defaultAxes = [];\nfor (let i = 0; i < 20; i++) {\n  defaultButtons.push({ pressed: false, touched: false, value: 0 })\n  defaultAxes.push(0);\n}\n\nflatstore.set(\"buttons\", defaultButtons);\nflatstore.set(\"axes\", defaultAxes);\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.start = 0;\n    this.a = 0;\n    this.b = 0;\n\n    this.state = {\n      gamepadIndex: -1,\n      gameLoopStarted: false,\n      gamePads: [],\n    }\n\n    window.addEventListener(\"gamepadconnected\", this.onGamepadConnected);\n  }\n\n  onGamepadConnected = (e) => {\n    const pads = navigator.getGamepads()\n    const gp = pads[e.gamepad.index];\n    console.log(\n      \"Gamepad connected at index %d: %s. %d buttons, %d axes.\",\n      gp.index, gp.id, gp.buttons.length, gp.axes.length\n    );\n    this.setState({ gamePads: pads })\n    if (gp.id.toLowerCase().indexOf(\"wheel\") > -1) {\n      this.changeGamepad(gp.index);\n    }\n  }\n\n  changeGamepad(id) {\n    console.log(id);\n    this.setState({ gamepadIndex: id, gameLoopStarted: true })\n    this.gameLoop();\n  }\n\n  render() {\n    //let gamepads = navigator.getGamepads();\n    //console.log(gamepads)\n    return (\n      <div style={{ paddingLeft: '50px', backgroundColor: '#133a4d' }}>\n        <select onChange={(e) => this.changeGamepad(e.target.value)} value={this.state.gamepadIndex}>\n          {\n            Object.values(this.state.gamePads).map(gp => (\n              <option value={gp.index}>{gp.id}</option>\n            ))\n          }\n        </select>\n        <br />\n        <div style={{ position: 'relative', top: '20px', }}>\n          <Wheel axis={0} />\n        </div>\n        <div style={{ position: 'relative', top: '-170px', left: \"30px\", 'marginLeft': '50px' }}>\n          <Pedals />\n        </div>\n      </div>\n    )\n  }\n\n  buttonPressed(b) {\n    if (typeof (b) == \"object\") {\n      return b.pressed;\n    }\n    return b === 1.0;\n  }\n\n  gameLoop() {\n    if (this.state.gamepadIndex === -1)\n      return;\n\n    //var gp = this.gamePads[this.gamePadIndex];\n    var gp = navigator.getGamepads()[this.state.gamepadIndex];\n    const buttonStates = gp.buttons.map(item => ({\n      pressed: gp.buttons[item].pressed,\n      touched: gp.buttons[item].touched,\n      value: gp.buttons[item].value,\n    }));\n    const axesStates = gp.axes.map(item => gp.axes[item]);\n\n    flatstore.set(\"buttons\", buttonStates);\n    flatstore.set(\"axes\", axesStates);\n\n    if (this.start) {\n      cancelAnimationFrame(this.start);\n    }\n    this.start = requestAnimationFrame(this.gameLoop);\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\nimport flatstore from 'flatstore';\r\nclass Wheel extends Component {\r\n\r\n    render() {\r\n        let degrees = this.props.rotation * 450;\r\n        let wheelStyle = {\r\n            //width: '400px',\r\n            transform: 'rotate(' + degrees + 'deg)'\r\n        };\r\n\r\n        return (\r\n            <img alt=\"\" style={wheelStyle} src=\"/stream-racing-wheel/g920/wheel.png\" />\r\n        )\r\n    }\r\n}\r\n\r\nlet onCustomWatched = (ownProps) => {\r\n    return ['axes-' + ownProps.axis];\r\n}\r\nlet onCustomProps = (key, value, store, ownProps) => {\r\n    return {\r\n        rotation: value\r\n    }\r\n}\r\n\r\nexport default flatstore.connect([], onCustomWatched, onCustomProps)(Wheel);\r\n","import React, { Component } from 'react';\r\nimport flatstore from 'flatstore';\r\nclass Pedal extends Component {\r\n\r\n    render() {\r\n        let currentPos = this.props.downAmount * this.props.value * -1;\r\n\r\n        let wheelStyle = {\r\n            width: '70px',\r\n            position: 'absolute',\r\n            top: this.props.top + 'px',\r\n            left: this.props.left + 'px',\r\n            transform: 'translateY(' + currentPos + 'px)'\r\n        };\r\n\r\n        return (\r\n            <img alt=\"\" style={wheelStyle} src={this.props.src} />\r\n        )\r\n    }\r\n}\r\n\r\nlet onCustomWatched = (ownProps) => {\r\n    return ['axes-' + ownProps.axis];\r\n}\r\nlet onCustomProps = (key, value, store, ownProps) => {\r\n    return {\r\n        value: value\r\n    }\r\n}\r\n\r\nexport default flatstore.connect([], onCustomWatched, onCustomProps)(Pedal);","import React, { Component } from 'react';\r\n\r\nimport Pedal from './pedal';\r\n\r\nclass Pedals extends Component {\r\n\r\n    render() {\r\n\r\n        let pedalsStyle = {\r\n            width: '400px'\r\n        }\r\n        return (\r\n            <div style={{ position: 'relative' }}>\r\n                <Pedal top={-20} left={290} downAmount={50} axis={1} src=\"/stream-racing-wheel/g920/gas.png\" />\r\n                <Pedal top={-10} left={160} downAmount={50} axis={2} src=\"/stream-racing-wheel/g920/brake.png\" />\r\n                <Pedal top={-10} left={40} downAmount={50} axis={5} src=\"/stream-racing-wheel/g920/clutch.png\" />\r\n\r\n                <img alt=\"\" style={pedalsStyle} src=\"/stream-racing-wheel/g920/pedals.png\" />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Pedals;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}